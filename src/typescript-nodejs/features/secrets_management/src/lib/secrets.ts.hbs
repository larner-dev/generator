import 'dotenv/config';
{{#includes features "secrets_management_doppler"}}
import got from "got";

{{/includes}}
// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface Secrets extends Record<string, string> {
{{#includes features "log_management_logtail"}}
  LOGTAIL_TOKEN: string;
{{/includes}}
{{#includes features "analytics_management_posthog"}}
  POSTHOG_TOKEN: string;
{{/includes}}
{{#includes features "db_knex"}}
  DB_HOST: string;
  DB_PORT: string;
  DB_USER: string;
  DB_PASSWORD: string;
  DB_NAME: string;
{{/includes}}
}

let _secrets: Secrets | null = null;

export const secrets = async (): Promise<Secrets> => {
  if (_secrets === null) {
    {{#includes features "secrets_management_doppler"}}
    const promise = got({
      method: 'GET',
      url: `https://${process.env.DOPPLER_TOKEN}@api.doppler.com/v3/configs/config/secrets/download?format=json`,
      throwHttpErrors: false
    }).json<Secrets>();
    delete process.env.DOPPLER_TOKEN;
    const res = await promise;
    if (!res.ok) {
      console.log("WARNING: Unable to retreive secrets from Doppler. Did you set the DOPPLER_TOKEN environment variable?");
    }

    _secrets = res.body || {};
    {{/includes}}
    {{#includes features "secrets_management_environment_variables"}}
    _secrets = process.env as Secrets;
    {{/includes}}
  }
  return _secrets;
};